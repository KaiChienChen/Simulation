---
title: "HW1"
subtitle: "The Algorithm and Implementation of Gauss-Jordan Elimination, Sweep Operator, and Power Method"
date: today
author: 陳凱騫
format:
 pdf:
    include-in-header:
      - text: |
         \usepackage{setspace,relsize}
         \usepackage{geometry}
         \geometry{verbose,tmargin=2.5cm,bmargin=2.5cm,lmargin=2.5cm,rmargin=2.5cm}
         \setmonofont{Microsoft JhengHei UI} 
mainfont: "Microsoft JhengHei UI"
toc: true
documentclass: article
pdf-engine: xelatex
execute:
  tidy: true
---


```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = FALSE)
```

## Part 1: Simulating the Ising Model

The Ising model is used to describe spin interactions in magnetic materials. In this section, I implement Gibbs sampling and Metropolis-Hastings algorithms to simulate spin configurations on a 32x32 grid.

### Gibbs Sampling and Metropolis-Hastings Implementation

```{r ising-model}
#| warning: false
# Parameters
set.seed(123)
n <- 32  # Grid size
T <- 2.5 # Temperature parameter
steps <- 10000  # Number of simulation steps

# Initialize Ising model grid
ising_grid <- matrix(sample(c(-1, 1), n * n, replace = TRUE), n, n)

# Define energy function
calc_energy <- function(grid, i, j) {
  neighbors <- sum(grid[max(1, i-1):min(n, i+1), j] + 
                   grid[i, max(1, j-1):min(n, j+1)]) - 2 * grid[i, j]
  -grid[i, j] * neighbors
}

# Gibbs Sampling
gibbs_sampling <- function(grid, T) {
  for (i in 1:n) {
    for (j in 1:n) {
      dE <- calc_energy(grid, i, j)
      prob <- 1 / (1 + exp(dE / T))
      grid[i, j] <- ifelse(runif(1) < prob, 1, -1)
    }
  }
  return(grid)
}

# Metropolis-Hastings Algorithm
mh_sampling <- function(grid, T) {
  for (step in 1:steps) {
    i <- sample(1:n, 1)
    j <- sample(1:n, 1)
    dE <- -2 * calc_energy(grid, i, j)
    if (dE < 0 || runif(1) < exp(-dE / T)) {
      grid[i, j] <- -grid[i, j]  # Flip spin
    }
  }
  return(grid)
}

# Run simulations
gibbs_result <- gibbs_sampling(ising_grid, T)
mh_result <- mh_sampling(ising_grid, T)

# Visualization
par(mfrow = c(1, 2))
image(gibbs_result, col = c("black", "white"), main = "Gibbs Sampling")
image(mh_result, col = c("black", "white"), main = "Metropolis-Hastings")
```

## Part 2: Solving the Travelling Salesman Problem (TSP)

We use the Simulated Annealing (SA) algorithm to solve the TSP by maximizing the total reward based on a randomly generated reward matrix.

### Simulated Annealing Implementation

```{r tsp-sa}
#| error: true
# Initialize reward matrix
set.seed(123)
n_cities <- 10
U <- matrix(runif((n_cities + 1)^2, 1, 10), n_cities + 1, n_cities + 1)
diag(U) <- 0  # No reward for staying in the same city

# Calculate total reward
calc_reward <- function(path, reward_matrix) {
  reward <- 0
  for (k in 1:(length(path) - 1)) {
    reward <- reward + reward_matrix[path[k], path[k + 1]]
  }
  return(reward)
}

# Simulated Annealing Algorithm
simulated_annealing <- function(U, initial_temp, cooling_rate, max_iter) {
  path <- c(0, sample(1:n_cities), 0)  # Initialize path
  current_reward <- calc_reward(path, U)
  best_path <- path
  best_reward <- current_reward
  temp <- initial_temp
  
  for (iter in 1:max_iter) {
    # Generate neighboring solution
    new_path <- path
    swap_idx <- sample(2:n_cities, 2)  # Swap two cities
    new_path[swap_idx] <- new_path[rev(swap_idx)]
    new_reward <- calc_reward(new_path, U)
    
    # Acceptance condition
    if (new_reward > current_reward || runif(1) < exp((new_reward - current_reward) / temp)) {
      path <- new_path
      current_reward <- new_reward
    }
    
    # Update best solution
    if (current_reward > best_reward) {
      best_path <- path
      best_reward <- current_reward
    }
    
    # Decrease temperature
    temp <- temp * cooling_rate
  }
  
  return(list(best_path = best_path, best_reward = best_reward))
}

# Run Simulated Annealing
sa_result <- simulated_annealing(U, initial_temp = 100, cooling_rate = 0.99, max_iter = 5000)

# Display results
print(sa_result$best_path)
print(sa_result$best_reward)
```

---

### Conclusion

1. The **Ising model simulation** successfully visualizes spin configurations under Gibbs sampling and Metropolis-Hastings.
2. The **Simulated Annealing algorithm** provides a near-optimal path for maximizing rewards in the TSP.
